    bool ConcurrentRangeLock::tryLock(uint64_t start, uint64_t end) {
        int topLevel = randomLevel();
        Node *preds[maxLevel + 1];
        Node *succs[maxLevel + 1];
    
        while (true) {
            if (findInsert(start, end, preds, succs)) {
                return false;
            } else {
                auto newNode = new Node();
                newNode->initialize(start, end, topLevel);
    
                for (int level = 0; level <= topLevel; ++level) {
                    newNode->next[level]->store(succs[level], false);
                }
    
                if (!preds[0]->next[0]->compareAndSet(succs[0], newNode, false, false)) {
                    continue;
                }
    
                for (int level = 1; level <= topLevel; ++level) {
                    while (!preds[level]->next[level]->compareAndSet(
                        succs[level], newNode, false, false)) {
                        findInsert(start, end, preds, succs);
                    }
                }
    
                return true;
            }
        }
    }