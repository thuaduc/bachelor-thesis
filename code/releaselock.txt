bool ConcurrentRangeLock::releaseLock(uint64_t start, uint64_t end) {
    Node *preds[maxLevel + 1];
    Node *succs[maxLevel + 1];
    Node *succ;

    while (true) {
        bool found = findExact(start, end, preds, succs);
        if (!found) {
            return false;
        } else {
            Node *nodeToRemove = succs[0];
            for (int level = nodeToRemove->getTopLevel();
                    level >= 0 + 1; level--) {
                bool marked[1] = {false};
                succ = nodeToRemove->next[level]->get(marked);
                while (!marked[0]) {
                    nodeToRemove->next[level]->attemptMark(succ, true);
                    succ = nodeToRemove->next[level]->get(marked);
                }
            }

            bool marked[1] = {false};
            succ = nodeToRemove->next[0]->get(marked);
            while (true) {
                bool iMarkedIt = nodeToRemove->next[0]->compareAndSwap(
                        succ, succ, false, true);
                succ = succs[0]->next[0]->get(marked);
                if (iMarkedIt) {
                    findDelete(start, end);

                    return true;
                } else if (marked[0]) {
                    return false;
                }
            }
        }
    }
}